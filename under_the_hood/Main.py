import DB_builder
import boom
import phylogenetics
from Bio.SubsMat.MatrixInfo import blosum62


if __name__ == '__main__':
    print("parsing data")
    file_location = 'C:/Users/ofeks/Documents/University/IGEM/bioinformatics/virushostdb.formatted.cds.faa'
    genes_info_dict, virus_dict, host_dict, tail_fiber_set, tail_spike_set = DB_builder.fasta_db_parser(file_location)

    #prf15_promotor_and_gene = 'tgttgacaattaatcatcggctcgtataatgtgtggaattgtgagcgctcacaattCTATGGACTATGTTTCTGTcACCGGATGTGCTTTCCGGTCTGATGAGTCCGTGAGGACGAAACAGtactagtgaaagaggagaaatactagATGACGACCAATACTCCGAAATACGGTGGCCTGCTCACCGACATAGGTGCCGCTGCGCTGGCTACGGCCAGCGCAGCAGGCAAGAAATGGCAGCCGACTCATATGCTGATCGGCGATGCCGGCGGTGCGCCGGGCGACACGCCGGATCCATTGCCTTCTGCGGCGCAGAAGAGCCTGATCAACCAACGCCATCGGGCCCAGCTGAATCGGCTGTTCGTTTCCGACAAGAACGCCAATACCTTGGTTGCCGAGGTGGTGCTGCCAGTTGAGGTAGGTGGCTTCTGGATCCGCGAGATCGGCCTGCAGGATGCCGACGGCAAGTTCGTCGCGGTATCCAACTGCCCGCCCAGCTACAAGGCTGCAATGGAAAGTGGCAGTGCGCGGACCCAGACCATTCGGGTGAACATCGCGCTCTCCGGCCTGGAGAATGTCCAGCTGCTGATCGACAACGGCATCATCTACGCCACTCAGGACTGGGTGAAGGAAAAGGTCGCTGCCGATTTCAAGGGCCGCAAGATCCTGGCTGGCAATGGCCTGCTCGGTGGGGGCGATCTTTCTGCCGACCGCAGCATTGGCCTGGCGCCTTCCGGCGTGACGGCGGGCAGCTATCGTTCGGTCACGGTGAACGCCAACGGGGTGGTCACCCAGGGCAGCAATCCGACCACCCTGGCCGGCTATGCGATCGGAGATGCCTATACCAAGGCCGATACCGACGGAAAACTGGCGCAGAAAGCGAACAAGGCCACCACCCTGGCCGGCTATGGCATCACCGATGCGCTGCGAGTCGATGGCAACGCCGTGTCATCCAGCAGGCTGGCCGCACCGCGCAGCCTGGCAGCCAGTGGCGATGCCTCCTGGTCGGTGACCTTCGACGGCAGTGCCAATGTTTCTGCGCCGCTGAGTCTTTCCGCTACCGGTGTGGCGGCGGGCAGCTATCCGAAGGTGACCGTGGATACGAAGGGAAGGGTGACTGCTGGAATGGCGCTGGCGGCGACGGACATTCCCGGGCTGGATGCGTCGAAGCTGGTCAGCGGGGTGCTGGCCGAGCAGCGTTTGCCGGTATTCGCGCGCGGGTTGGCTACTGCTGTCTCGAACAGTAGCGATCCGAACACCGCGACCGTGCCGTTGATGCTGACCAATCATGCGAACGGACCTGTTGCCGGACGATACTTCTACATCCAGTCGATGTTCTATCCGGATCAGAACGGCAATGCTTCGCAGATTGCAACGAGCTACAACGCTACATCCGAGATGTATGTACGGGTGTCCTACGCGGCCAACCCTAGCATCCGGGAGTGGTTGCCCTGGCAGCGCTGCGACATTGGAGGTTCCTTCACCAAAGAGGCCGATGGTGAACTGCCTGGAGGCGTCAACCTGGATTCGATGGTGACCTCAGGGTGGTGGAGCCAGAGTTTTACTGCCCAAGCTGCCAGTGGAGCCAACTACCCTATAGTTCGGGCCGGCCTGCTTCATGTGTACGCCGCGAGTAGCAATTTCATCTATCAGACGTATCAAGCCTACGATGGTGAGAGTTTCTATTTCCGGTGCCGGCATTCAAATACCTGGTTTCCCTGGCGTCGCATGTGGCATGGCGGAGACTTCAACCCCAGTGACTATCTGTTGAAGTCGGGGTTCTATTGGAATGCGTTACCGGGAAAACCTGCCACTTTTCCACCATCCGCACATAACCATGACGTCGGACAGCTTACTTCGGGCATTCTCCCCCTGGCACGTGGCGGCGTCGGTTCGAATACGGCAGCGGGAGCACGTAGCACTATCGGAGCAGGGGTTCCTGCGACTGCTTCCCTTGGGGCGAGCGGATGGTGGCGGGACAATGACACTGGCCTCATTAGGCAATGGGGGCAGGTCACTTGCCCCGCCGATGCCGATGCTTCGATTACGTTCCCGATTCCTTTCCCTACGCTATGCCTCGGCGGATATGCGAATCAGACGAGTGCTTTCCATCCGGGAACGGATGCCAGTACAGGTTTCCGTGGAGCGACTACCACTACCGCGGTGATTCGCAATGGCTACTTTGCTCAGGCGGTT'
    #PS17_protein = 'MSTNQYGGFLTDKGAAKQVEAASGGLRRNITHMLIGDAGGAPGQTPDPVPSPLQTKLVRQRYRVKLNRLVAADNSPSVLIAEAILPQDVGGWWMRELGLEDSDGDMIAVANCAPSYKPLVNEGSGRTQTVRLHIAFSHAETVDLLIDPNVVTATVADLQNALLEVRATNDATGQMTRGTDGKLALPLSLSLTGIAAGTYRSLTVDAKGRATSGSNPTTLGGYGITDALAKSDAVDVPAPNKLLRLNAASQLPASITGNAATATKLAVPRMLSFTGDATGGASFDGSANAAVALTLANSGVTAGTYAKVTVNGKGLVTGGAQLTAADIPALDAGKVVSGVLPIARGGTGNAIGQAATAVKLASPRTLAIAGDATGSAAFDGSANASISVTLANTGVAVGTYTKVRVNAKGLVTSAASLTADDVPWLDASKVTSGMFADARLPWYAQGLCTSAPNTTDPNTTNIPLILTNHENGPIPGTFFYIQTMMYNQRNGNAAQIAVRYAANAEMYVRYMYDVGNKRGVWSAWKRCDVGGSFAKEADGELGGGVNLDTMIASGWWHQPFSANAKNGTNYPVGEAGLLTVHAPTSTMIYQTYRGYAAGGLYWRCRYNGTWSAWYRAWDSGNFNPANYVARSEYSWASLPGKPATFPPSGHNHDATQITSGILPLARGGLGANNAVTARSNIGAGTIATASLGSSGWWRDNDTGYIRQWGRVTVPGDGSAAITFPIAFPSVCLGGFAGQTANFHPGTDASTSFYNQSTTGATLENGYQFQAVLLWEAFGR'
    #genes_info_dict['SHEKER_PS17'] = DB_builder.Gene('SHEKER_PS17', 'PS17', 'tail fiber', 'Pseudomonas aeruginosa', 'sheker virus lineage', 'sheker host lineage',
    #                                 'sheker sample_type', 'sheker taxonomic_identifier', PS17_protein)
    #tail_fiber_set.add('SHEKER_PS17')
    print("creating heuristic")
    top_grades_set = boom.get_boom_results(genes_info_dict, 1000)
    top_grades_set = top_grades_set.union(tail_fiber_set, tail_spike_set)
    print("aligning genes")
    genes_grades = DB_builder.get_grades_of_genes(genes_info_dict, top_grades_set, blosum62, -11, -1, False)
    print("filtering top genes")
    DB_builder.only_highest_grade_per_virus(genes_info_dict, genes_grades)
    DB_builder.only_top_grades(genes_grades, genes_info_dict, 75, 0)
    print("optimizing parameters")
    best_parameters = phylogenetics.hill_climbing_optimization(genes_info_dict, genes_grades.keys())
    print("re-aligning genes with the best parameters: {0}".format(best_parameters))
    genes_grades, genes_similarity = DB_builder.get_grades_of_genes(genes_info_dict, top_grades_set, best_parameters[0], best_parameters[1], best_parameters[2], True)
    DB_builder.all_genes_grades_table_writer('C:/Users/ofeks/Documents/University/IGEM/bioinformatics/top_grades+and_tails_alignment.csv', genes_info_dict, genes_grades, genes_similarity)
    print("file saved")